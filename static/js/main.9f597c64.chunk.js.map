{"version":3,"sources":["actions/index.js","containers/AddTodo.js","components/Plus.js","containers/PlusLink.js","components/Summary.js","containers/SummaryLink.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Tag.js","containers/FilterLink.js","components/Header.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/showTodoInput.js","reducers/index.js","serviceWorker.js","index.js"],"names":["showTodoInput","show","type","VisibilityFilters","connect","state","showTodoInputField","input","dispatch","onBlurHandler","e","key","undefined","value","trim","text","id","uuidv4","visibility","className","ref","node","data-testid","onKeyPress","onBlur","Plus","onClick","Summary","todos","completed","filter","t","length","open","percentage","stroke","Math","round","viewBox","width","height","d","strokeDasharray","innerCircle","x","y","dominantBaseline","textAnchor","Todo","style","textDecoration","name","defaultChecked","htmlFor","TodoList","toggleTodo","map","todo","getVisibleTodos","Error","visibilityFilter","Tag","active","children","styling","disabled","ownProps","Header","FilterLink","App","today","Date","toLocaleDateString","weekday","getDate","SummaryLink","VisibleTodoList","PlusLink","action","reverse","combineReducers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","store","createStore","rootReducer","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f597c64.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid'\nexport const addTodo = (text) => ({\n    type: 'ADD_TODO',\n    id: uuidv4(),\n    text,\n})\n\nexport const setVisibilityFilter = (filter) => ({\n    type: 'SET_VISIBILITY_FILTER',\n    filter,\n})\n\nexport const toggleTodo = (id) => ({\n    type: 'TOGGLE_TODO',\n    id,\n})\n\nexport const showTodoInput = (show) => ({\n    type: 'SHOW_TODO_INPUT',\n    show: show,\n})\n\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE',\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo, showTodoInput } from '../actions'\nimport PropTypes from 'prop-types'\n\nconst AddTodo = ({ dispatch, showTodoInputField }) => {\n    const onBlurHandler = (e) => {\n        if (e.key === 'Enter' || e.key === undefined) {\n            if (!input.value.trim()) {\n                return dispatch(showTodoInput(false))\n            }\n            dispatch(addTodo(input.value))\n            input.value = ''\n            return dispatch(showTodoInput(false))\n        }\n\n        return\n    }\n\n    let input\n\n    let visibility = showTodoInputField\n        ? 'addtodo__input--visible'\n        : 'addtodo__input--hidden'\n    return (\n        <div className={`addtodo ${visibility}`}>\n            <h4>Add a task:</h4>\n            <div className=\"addtodo__input\">\n                <input\n                    ref={(node) => (input = node)}\n                    data-testid=\"add-todo-input\"\n                    onKeyPress={onBlurHandler}\n                    onBlur={onBlurHandler}\n                />\n            </div>\n        </div>\n    )\n}\n\nAddTodo.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    showTodoInputField: PropTypes.bool.isRequired,\n}\n\nconst mapStateToProps = (state) => {\n    // console.log(state.showTodoInputField)\n    return { showTodoInputField: state.showTodoInputField }\n}\n\nexport default connect(mapStateToProps)(AddTodo)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Plus = ({ onClick }) => (\n    <div onClick={onClick} className=\"btn btn--plus\">\n        +\n    </div>\n)\n\nPlus.propTypes = {\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Plus\n","import { connect } from 'react-redux'\nimport { showTodoInput } from '../actions'\nimport Plus from '../components/Plus'\n\n// const mapStateToProps = (state, ownProps) => {\n//     return { active: ownProps.filter === state.visibilityFilter }\n// }\n\n// const mapDispatchToProps = (dispatch, ownProps) => ({\nconst mapDispatchToProps = (dispatch) => ({\n    // onClick: () => dispatch(setVisibilityFilter(ownProps.filter)),\n    onClick: () => dispatch(showTodoInput(true)),\n    // onClick: () => console.log('i got clicked'),\n})\n\nexport default connect(null, mapDispatchToProps)(Plus)\n","import React from 'react'\n\nconst innerCircle = (completed, stroke) => {\n    if (completed > 0) {\n        return (\n            <path\n                className=\"summary__circle\"\n                strokeDasharray={stroke}\n                d=\"M18 2.0845\n                                a 15.9155 15.9155 0 0 1 0 31.831\n                                a 15.9155 15.9155 0 0 1 0 -31.831\"\n            />\n        )\n    }\n}\n\nconst Summary = ({ todos }) => {\n    const completed = todos.filter((t) => t.completed).length\n    const open = todos.filter((t) => !t.completed).length\n    let [percentage, stroke] = [0, '0, 100']\n    if (completed > 0) {\n        percentage = Math.round(\n            (todos.filter((t) => t.completed).length / todos.length) * 100\n        )\n        stroke = `${percentage}, 100`\n    }\n\n    return (\n        <div className=\"summary\">\n            <div className=\"summary__container\">\n                <div className=\"summary__col\">\n                    <div className=\"summary__graph\">\n                        <svg\n                            viewBox=\"0 0 36 36\"\n                            className=\"summary__circular-chart\"\n                            width=\"125\"\n                            height=\"125\"\n                        >\n                            <path\n                                className=\"summary__circle-bg\"\n                                d=\"M18 2.0845\n                                a 15.9155 15.9155 0 0 1 0 31.831\n                                 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                            />\n                            {innerCircle(completed, stroke)}\n                            <text\n                                x=\"52%\"\n                                y=\"50%\"\n                                className=\"summary__percentage\"\n                                dominantBaseline=\"middle\"\n                                textAnchor=\"middle\"\n                            >\n                                {percentage}%\n                            </text>\n                        </svg>\n                    </div>\n                </div>\n                <div className=\"summary__col\">\n                    <div className=\"summary__list\">\n                        <ul>\n                            <li>\n                                <span className=\"description\">Total Tasks</span>\n                                <span className=\"number\">{todos.length}</span>\n                            </li>\n                            <li>\n                                <span className=\"description\">Open</span>\n                                <span className=\"number\">{open}</span>\n                            </li>\n                            <li>\n                                <span className=\"description\">Completed</span>\n                                <span className=\"number\">\n                                    {' '}\n                                    {\n                                        todos.filter((t) => t.completed).length\n                                    }{' '}\n                                </span>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Summary\n","import { connect } from 'react-redux'\nimport Summary from '../components/Summary'\n\nconst mapStateToProps = (state) => ({ todos: state.todos })\n\nexport default connect(mapStateToProps)(Summary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Todo = ({ onClick, completed, text, id }) => (\n    <li\n        className=\"todolist__todo\"\n        style={{\n            textDecoration: completed ? 'line-through' : 'none',\n        }}\n    >\n        <input\n            type=\"checkbox\"\n            className=\"todolist__radio-input\"\n            value=\"1\"\n            id={id}\n            name={id}\n            onClick={onClick}\n            defaultChecked={completed}\n        />\n        <label htmlFor={id} className=\"todolist__radio-label\">\n            <span className=\"todolist__radio-button\"></span>\n            &nbsp;{text}\n        </label>\n    </li>\n)\n\nTodo.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n}\n\nexport default Todo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\n\nconst TodoList = ({ todos, toggleTodo }) => (\n    <div>\n        <div className=\"list-mask\">\n            <ul className=\"todolist\">\n                {todos.map((todo) => (\n                    <Todo\n                        key={todo.id}\n                        {...todo}\n                        onClick={() => toggleTodo(todo.id)}\n                    />\n                ))}\n            </ul>\n        </div>\n    </div>\n)\n\nTodoList.propTypes = {\n    todos: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            completed: PropTypes.bool.isRequired,\n            text: PropTypes.string.isRequired,\n        }).isRequired\n    ).isRequired,\n    toggleTodo: PropTypes.func.isRequired,\n}\n\nexport default TodoList\n","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions'\nimport TodoList from '../components/TodoList'\nimport { VisibilityFilters } from '../actions'\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case VisibilityFilters.SHOW_ALL:\n            return todos\n        case VisibilityFilters.SHOW_COMPLETED:\n            return todos.filter((t) => t.completed)\n        case VisibilityFilters.SHOW_ACTIVE:\n            return todos.filter((t) => !t.completed)\n        default:\n            throw new Error('Unknown filter: ' + filter)\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { todos: getVisibleTodos(state.todos, state.visibilityFilter) }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggleTodo: (id) => dispatch(toggleTodo(id)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Tag = ({ active, children, onClick }) => {\n    // console.log(active)\n\n    const highlight = active ? 'btn--highlight' : ''\n\n    const styling = `header__item btn btn--tag ${highlight}`\n    return (\n        <li onClick={onClick} disabled={active} className={styling}>\n            {children}\n        </li>\n    )\n}\n\nTag.propTypes = {\n    active: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default Tag\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Tag from '../components/Tag'\n\nconst mapStateToProps = (state, ownProps) => {\n    return { active: ownProps.filter === state.visibilityFilter }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onClick: () => dispatch(setVisibilityFilter(ownProps.filter)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tag)\n","import React from 'react'\nimport { VisibilityFilters } from '../actions'\nimport FilterLink from '../containers/FilterLink'\n\nconst Header = () => {\n    return (\n        <ul className=\"header\">\n            {/* <h4 className=\"heading-secondary\">Tasks</h4> */}\n            <li className=\"heading-secondary header__item\">Tasks</li>\n            <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\n                Completed\n            </FilterLink>\n            <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Open</FilterLink>\n            <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n        </ul>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport AddTodo from '../containers/AddTodo'\nimport PlusLink from '../containers/PlusLink'\nimport SummaryLink from '../containers/SummaryLink'\nimport VisibleTodoList from '../containers/VisibleTodoList'\nimport Header from './Header'\n\nconst App = () => {\n    const today = new Date()\n    return (\n        <div className=\"app\">\n            <h2 className=\"heading-primary\">\n                {today.toLocaleDateString('en-US', { weekday: 'long' })},{' '}\n                {today.getDate()}\n            </h2>\n            <SummaryLink />\n            <AddTodo />\n            <Header />\n            <VisibleTodoList />\n            <PlusLink />\n            {/* <Footer /> */}\n        </div>\n    )\n}\n\nexport default App\n","const todos = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false,\n                },\n            ].reverse()\n        case 'TOGGLE_TODO':\n            return state.map((todo) =>\n                todo.id === action.id\n                    ? { ...todo, completed: !todo.completed }\n                    : todo\n            )\n        default:\n            return state\n    }\n}\n\nexport default todos\n","import { VisibilityFilters } from '../actions'\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter\n","const showTodoInputField = (state = false, action) => {\n    switch (action.type) {\n        case 'SHOW_TODO_INPUT':\n            return action.show\n        default:\n            return state\n    }\n}\n\nexport default showTodoInputField\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\nimport showTodoInputField from './showTodoInput'\n\nexport default combineReducers({\n    todos,\n    visibilityFilter,\n    showTodoInputField,\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport './sass/main.scss'\nimport { v4 as uuidv4 } from 'uuid'\nimport * as serviceWorker from './serviceWorker'\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n\nconst store = createStore(rootReducer, {\n    todos: [],\n})\n\n// todos: [\n//     {\n//         id: uuidv4(),\n//         text: 'Take the coat to dry cleaning',\n//         completed: false,\n//     },\n//     { id: uuidv4(), text: \"Fix mom's bike \", completed: false },\n//     { id: uuidv4(), text: 'Feed the cat', completed: false },\n// ],\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}